<아키텍처를 사용하면 좋은 이유>
- 일관적인 코드 작성(유지보수, 협업면에서 좋음)
- 생산성 향상
- 테스트 용이
- 앱 개발의 방향성을 잡아줌 등


1. MVP 아키텍처
    - Model + View(ViewController) + Presenter(비즈니스 로직과 뷰를 제어)

2. MVVM 아키텍처
    - Model + View + ViewModel
    - MVVM + DataBinding

3. 구글 아키텍처
    -

4. MVI 아키텍처
    - Model + View + Intent

https://classroom.udacity.com/courses/ud9012

의존성 주입을 할 수 있는 DI Vs Service Locator

DI -> Dependency Injection
    -> 컴포넌트간의 의존 관계를 소스코드 내부가 아닌 외부 설정 파일등을 통해
    정의 되게 하는 디자인 패턴중 하나
    -> 객체를 직접 생성하지 않고 외부에서 주입한 객체를 사용하는 방식
    -> 인스턴스 간 디커플링을 만들어줌 -> 유닛테스트 용이성 증대

    Ex> Hilt

Service Locator -> 중앙등록자 Service Locator를 통해 요청이 들어왔을 때
                    특정 인스턴스 반환
                -> apk 크기, 빌드 속도, 메서드 수 등 복잡한 제약이 있는 경우
                사용하기 편함

                Ex> Koin

